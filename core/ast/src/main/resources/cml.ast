//TODO1: maybe generate classes with the Comparable interface
Packages
base eu.compassresearch.ast.node;
analysis eu.compassresearch.ast.analysis;

Tokens
  java_File = 'java:java.io.File';
  java_Stream = 'java:java.io.InputStream';


Abstract Syntax Tree

source {->  package='eu.compassresearch.ast.program'
       | [paragraphs]: definition* 
       | (type):type }
    = {file} [name]: java_String (file): java_File
    | {tcpStream} [ip]: java_String [port]: java_String (stream): java_Stream
    | {inputStream} [origin]: java_String (stream): java_Stream
    ;

/*
 Declarations
*/
singleDeclaration {-> package='eu.compassresearch.ast.declarations'
                  | [location]:location 
                  | [nameScope]:nameScope}
    = {type}
        [identifier]:LexIdentifierToken //*
        (type):type
    | {expression}
        [identifier]:LexIdentifierToken //*
        [expression]:exp
    ;

/*
 Definitions
*/
definition {-> package='eu.compassresearch.ast.definitions'}
    = {action}
        [declarations]:parametrisation*
        [action]:action
    | {chanset}
        [identifier]:LexIdentifierToken
        [chansetExpression]:VarsetExpression
    | {nameset}
        [identifier]:LexIdentifierToken
        [namesetExpression]:VarsetExpression
    | {process}
        [localState]: parametrisation*//singleDeclaration.type*
        [process]: process
    | {channel}
        (type):type.channel
    | #class
    | {initial}
        [operationDefinition]: definition
    | {state}
        [fields]:field.field*
        [invPattern]:pattern [invExpression]:exp (invdef):definition.#Function.explicit
        [initPattern]:pattern [initExpression]:exp (initdef):definition.#Function.explicit
        (stateDefs):definition*
    | #block
    | {config}
        [configId]: LexIdentifierToken
        [included]: LexIdentifierToken*
    ;

#block {-> package='eu.compassresearch.ast.definitions'
      | [configId]: LexIdentifierToken
      | (defs): definition*
      }
    = {type}
    | {channel}
    | {chanset}
    | {function}
    | {value}
    ;
   
#class {-> package='eu.compassresearch.ast.definitions'}
    = {action}
    ;

/*
    Expressions
*/
exp {-> package='eu.compassresearch.ast.expressions'
    | (isVisited):java_Boolean}
    = {bracketed} [expression]:exp /*cml*/
    | {stateInit} (state):definition.state
    | {tupleSelect} [tuple]:exp [entry]:java_Integer
    | #Channel
    | {unresolvedPath} [identifiers]:LexIdentifierToken*
    ;

#Channel  {-> package='eu.compassresearch.ast.expressions'}
    = #Rename
    | {name}
        [identifier]:LexIdentifierToken
        [expressions]:exp*
    ;

#Rename {-> package='eu.compassresearch.ast.expressions'}
    = {comprehension} [renamePairs]:pair.rename [bindings]:multipleBind* [predicate]:exp
    | {enumeration} [renamePairs]:pair.rename*
    ;

VarsetExpression {-> package='eu.compassresearch.ast.expressions'
                 | [location]:location 
                 | (type):type}
    = {identifier} [identifier]:LexIdentifierToken
    | {enum} [channelNames]:exp.#Channel.name*
    | {comp} [channelNameExp]:exp.#Channel.name [bindings]:multipleBind* [predicate]:exp
    | {fatEnum} [channelNames]:exp.#Channel.name*
    | {fatComp} [channelNameExp]:exp.#Channel.name [bindings]:multipleBind* [predicate]:exp
    | #VOp
    ;

#VOp {-> package='eu.compassresearch.ast.expressions'
     | [left]:VarsetExpression 
     | [op]:LexToken 
     | [right]:VarsetExpression}
    = {Union}
    | {Inter}
    | {Sub}
    ;

/*
        Types
*/

type {-> package='eu.compassresearch.ast.types'}
    = {process} [name]:LexNameToken (classdef):definition.process // marker that a process is typed ok
    | {channel} [parameters]:type* // marker stipulating that a channel Paragraph is typed ok
    ;

access {-> package='eu.compassresearch.ast.definitions'}
    = {logical}
    ;

/*
        Patterns
*/

pair {-> package='eu.compassresearch.ast.patterns'}
    = {rename} [from]:exp.#Channel.name [to]:exp.#Channel.name
    ;

/*
        Process
*/
process {-> package='eu.compassresearch.ast.process'
        | [location]:location}
    = {action}
        [actionDefinition]:definition.#class.action
        [action]:action
    | {sequentialComposition}
        [left]:process
        [right]:process
    | {externalChoice}
        [left]:process
        [right]:process
    | {internalChoice}
        [left]:process
        [right]:process
    | {generalisedParallelism}
        [left]:process
        [chansetExpression]:VarsetExpression
        [right]:process
    | {alphabetisedParallelism}
        [left]:process
        [leftChansetExpression]:VarsetExpression
        [rightChansetExpression]:VarsetExpression
        [right]:process
    | {interleaving}
        [left]:process
        [right]:process
    | {interrupt}
        [left]:process
        [right]:process
    | {timedInterrupt}
        [left]:process
        [timeExpression]:exp
        [right]:process
    | {untimedTimeout}
        [left]:process
        [right]:process
    | {timeout}
        [left]:process
        [timeoutExpression]:exp
        [right]:process
    | {hiding}
        [left]:process
        [chansetExpression]:VarsetExpression
    | {skip}
    | {startDeadline}
        [left]:process
        [expression]:exp
    | {endDeadline}
        [left]:process
        [expression]:exp
    | {instantiation}
        [parametrisations]:parametrisation*
        [process]: process
        [args]:exp*
    | {reference}
        [processName]:LexNameToken
        [args]:exp*
        (processDefinition):definition.process
    | {channelRenaming}
        [process]:process
        [renameExpression]:exp.#Channel.#Rename
    | #Replicated
    ;

#Replicated {-> package='eu.compassresearch.ast.process'
            | [replicationDeclaration]:singleDeclaration* 
            | [replicatedProcess]:process}
    = {sequentialComposition}
    | {externalChoice}
    | {internalChoice}
    | {generalisedParallelism}
        [chansetExpression]:VarsetExpression
    | {alphabetisedParallelism}
        [chansetExpression]:VarsetExpression
    | {interleaving}
    ;


/*
        Actions
*/
action {-> package='eu.compassresearch.ast.actions'
       | [location]:location
       | (type):type}
    = {skip} //what is the semantic meaning of CML skip vs VDM skip?
    | {stop}
    | {chaos}
    | {div}
    | {wait}
        [expression]:exp
    | {communication}
        [identifier]:LexIdentifierToken
        [communicationParameters]:communicationParameter*
        [action]:action
    | {guarded}
        [expression]:exp
        [action]:action
    | {sequentialComposition}
        [left]:action
        [right]:action
    | {externalChoice}
        [left]:action
        [right]:action
    | {internalChoice}
        [left]:action
        [right]:action
    | {interrupt}
        [left]:action
        [right]:action
    | {timedInterrupt}
        [left]:action
        [right]:action
        [timeExpression]:exp
    | {untimedTimeout}
        [left]:action
        [right]:action
    | {timeout}
        [left]:action
        [right]:action
        [timeoutExpression]:exp
    | {hiding}
        [left]:action
        [chansetExpression]:VarsetExpression
    | {startDeadline}
        [left]:action
        [expression]:exp
    | {endDeadline}
        [left]:action
        [expression]:exp
    | {channelRenaming}
        [action]:action
        [renameExpression]:exp.#Channel.#Rename
    | {mu}
        [identifiers]:LexIdentifierToken*
        [actions]:action*
    | #Parallel
    | {parametrised}
        [parametrisations]:parametrisation*
        [action]:action
    | #Instantiated
    | #Replicated
    | {stm} [statement]:stm
    | {call} [name]:LexNameToken [args]:exp*
    | {reference}
        [name]:LexNameToken
        [args]:exp*
        (actionDefinition):definition.action
    ;

#Parallel {-> package='eu.compassresearch.ast.actions'
          | [leftAction]:action
          | [leftNamesetExpression]:VarsetExpression
          | [rightNamesetExpression]:VarsetExpression
          | [rightAction]:action}
    = {interleaving}
    | {generalisedParallelism}
        [chansetExpression]:VarsetExpression
    | {alphabetisedParallelism}
        [leftChansetExpression]:VarsetExpression
        [rightChansetExpression]:VarsetExpression
    ;

#Replicated {-> package='eu.compassresearch.ast.actions'
            | [replicationDeclaration]:singleDeclaration* 
            | [replicatedAction]:action}
    = {sequentialComposition}
    | {externalChoice}
    | {internalChoice}
    | {commonInterleaving}
        [namesetExpression]:VarsetExpression
    | {interleaving}
        [namesetExpression]:VarsetExpression
    | {generalisedParallelism}
        [chansetExpression]:VarsetExpression
        [namesetExpression]:VarsetExpression
    | {alphabetisedParallelism}
        [namesetExpression]:VarsetExpression
        [chansetExpression]:VarsetExpression
    ;

#Instantiated {-> package='eu.compassresearch.ast.actions'}
   = {parametrised} [action]:action.parametrised  [args]:exp*
   ;

communicationParameter {-> package='eu.compassresearch.ast.actions'
                       | [location]:location 
                       | [expression]:exp}
    = {read} [pattern]:pattern
    | {write}
    | {signal}
    ;

parametrisation {-> package='eu.compassresearch.ast.actions'
                | [location]:location 
                | [declaration]:definition.local}
    = {val}
    | {res}
    | {vres}
    ;
        
stateDesignator {-> package='eu.compassresearch.ast.statements'}
    = {unresolved} [path]:exp//well we wanted this:exp.unresolvedPath
    ;

objectDesignator {-> package='eu.compassresearch.ast.statements'}
    = {unresolved} [path]:exp//well we wanted this:exp.unresolvedPath
    ;

/*
* Real statements
*/
stm {-> package='eu.compassresearch.ast.statements'
    | [location]:location 
    | (type):type}
    = {action} [action]:action
    | {new} 
        [destination]:stateDesignator
        [className]:LexIdentifierToken
        [args]:exp*
        //(classdef):definition.#class
        //(ctorDefinition):definition
    | #NonDeterministic
    ;

#NonDeterministic {-> package='eu.compassresearch.ast.statements'}
    = {if}
        [alternatives]:stm.#NonDeterministic.alt*
    | {alt}
        [guard]:exp
        [action]:stm
    | {do}
        [alternatives]:stm.#NonDeterministic.alt*
    ;
 
