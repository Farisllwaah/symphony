channels
  inA : nat * nat
  outA : nat * nat
  after : nat

process p = 
begin
  state
    a: nat :=0

  operations
    updateA : nat ==> ()
    updateA(newA) == 
      a := newA

  @ (||| n in set {1,...,3} @ [{}] inA.n!a -> updateA(n); outA!n!a -> Skip); after.a->Skip

end